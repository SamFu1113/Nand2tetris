// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y–x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs.
 * Which function to compute is determined by 6 input bits
 * denoted zx, nx, zy, ny, f, no.
 * The computed function's value is called "out".
 * In addition to computing out, the ALU computes two
 * 1-bit outputs called zr and ng:
 * if out == 0, zr = 1; otherwise zr = 0;
 * If out < 0, ng = 1; otherwise ng = 0.
 * The 6-bit combinations (zx,nx,zy,ny,f,no) and
 * their effect are documented in the book.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values,
// as follows:
// if (zx  == 1) sets x = 0        // 16-bit constant
// if (nx  == 1) sets x = ~x       // bitwise "not"
// if (zy  == 1) sets y = 0        // 16-bit constant
// if (ny  == 1) sets y = ~y       // bitwise "not"
// if (f   == 1) sets out = x + y  // integer 2's-complement addition
// if (f   == 0) sets out = x & y  // bitwise And
// if (no  == 1) sets out = ~out   // bitwise Not
// if (out == 0) sets zr = 1
// if (out < 0)  sets ng = 1


CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if f == 1) or out = x & y (if == 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put your code here.
    Mux16(a = x, b[0..15] = false, sel = zx, out = ozx);
    Not16(in = ozx, out = onxb);
    Mux16(a = ozx, b = onxb, sel = nx, out = onx);

    Mux16(a = y, b[0..15] = false, sel = zy, out = ozy);
    Not16(in = ozy, out = onyb);
    Mux16(a = ozy, b = onyb, sel = ny, out = ony);

    And16(a = onx, b = ony, out = oaab);
    Add16(a = onx, b = ony, out = oapb);
    Mux16(a = oaab, b = oapb, sel = f, out = oab);

    Not16(in = oab, out = noab);
    Mux16(a = oab, b = noab, sel = no, out = out,
          out[0..7] = f1, out[8..15] = f2,
          out[15] = ng);

    Or8Way(in = f1, out = o1);
    Or8Way(in = f2, out = o2);
    Or(a = o1, b = o2, out = nzr);
    Not(in = nzr, out = zr);
}